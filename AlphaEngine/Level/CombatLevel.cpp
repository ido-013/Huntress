// Author : sinu

#include "CombatLevel.h"
#include "../GSM/GameStateManager.h"
#include "../ComponentManager/ComponentManager.h"
#include "../GameObject/GameObject.h"
#include "../components.h"
#include "../EventManager/EventManager.h"
#include "../Prefab/Prefab.h"
#include "../ResourceManager/ResourceManager.h"
#include "../Combat/Combat.h"
#include "../Components/EnemyComp.h"
#include "../Serializer/Serializer.h"
#include <iostream>
#include <string>
#include "../UI/CombatUI.h"
#include "../UIM/BtnManager.h"
#include "../UI/StoreUI.h"
#include "../UI/EscMenu.h"
#include "../Components/SubtitleComp.h"


#include "../Background/Background.h"
#include "../Utils/Utils.h"
#include "../Tile/Tile.h"

GameObject* player = nullptr;
GameObject* directionArrow = nullptr;
GameObject* enemy = nullptr;

//std::string map[30] =
//{
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"---------rS--------Sl---------",
//	"-SSSSSSSSDD--------DDSSSSSSSS-",
//	"--DDDDDDDD----------DDDDDDDD--",
//	"---DDDDDD------------DDDDDDD--",
//	"---DDDDDD-------------DDDDDD--",
//	"---DDDDD--------------DDDDD---",
//	"----DDDD--------------DDDDD---",
//};

//std::string map[30] =
//{
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-SL----------------------------",
//	"-DDDL--------------------------",
//	"--DDDDL------------------------",
//	"--DD-DDDSS---------------------",
//	"--DD-DDDD----------------------",
//	"--DD-DD------------------------",
//	"--DD-DD------------------------",
//	"-DDDDDD--------------SSSSSSSSS-",
//	"-DD-DDD---------------DDDDDDDD-",
//	"-DD-DDDD--------------DDDDDD---",
//	"-DD-DDDD---------------DDDDD---",
//	"-DDDDDDD---------------DDDDD---",
//	"--DDDDDD---------------DDDDD---",
//};

//std::string map[30] =
//{
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-SSSSSS-----------------SSSSSS-",
//	"-DDDDD-------------------DDDDD-",
//	"--DDDD-------------------DDDD--",
//	"--DDD---------------------DDD--",
//	"--DDD---------------------DDD--",
//	"--DDD---------------------DDD--",
//};

//std::string map[30] =
//{
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"---------------D---------------",
//	"---------------DD--------------",
//	"--------------DDD--------------",
//	"--------------DDD--------------",
//	"-------------DDD---------------",
//	"-SSSL---------DDDD-------------",
//	"-DDDDDSSSS----DDDD---SSSSSSSSS-",
//	"--DDDDDDD-----DDDD----DDDDDDDD-",
//	"--DDDDD-------DDDD----DDDDDD---",
//	"-DDDDDDD-----DDDDD-----DDDDD---",
//	"-DDDDDDD-----DDDDD-----DDDDD---",
//	"--DDDDDD-----DDDDD-----DDDDD---",
//};

//std::string map[30] =
//{
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"-------------------SSSSSSSSSS-",
//	"--------------------DDDDDDDD--",
//	"---------------------DDDDDD---",
//	"---------rS----------DDDDDD---",
//	"--------rDD-----------DDDDD---",
//	"-SSSSSSSDDD-----------DDDD----",
//	"--DDDDDDDD------------DDDD----",
//	"---DDDDDD--------------DDD----",
//	"---DDDDD--------------DDD-----",
//	"---DDDD----------------DDD----",
//	"----DDD---------------DDDDD---",
//};

//std::string map[30] =
//{
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"-------------------------------",
//	"---------------D---------------",
//	"--------------DD---------------",
//	"--------------DD---------------",
//	"--------------DD---------------",
//	"--------------DD---------------",
//	"-------------DDDD--------------",
//	"-------------DDDD--------------",
//	"-------------------------------",
//	"-------------------------------",
//	"---------------DD--------------",
//	"--------------DDD--------------",
//	"-----R-S-----DDDD--------------",
//	"-SSSSDDD-----DDDDDD-----SSSSS--",
//	"-DDDDDD------DDDDDD------DDD---",
//	"--DDDDD-------DDDDD------DDD---",
//	"--DDDDD-------DDDDD-------DD---",
//	"--DDDD--------DDDDD-------DD---",
//	"--DDDD--------DDDDD-------DD---",
//};

//std::string map[30] =
//{
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"--------------------------R-S-",
//	"------------------------R-DDD-",
//	"----------------------R-DD----",
//	"------DDDDD---------R-DD------",
//	"-----DDDDDD-------R-DDDD------",
//	"-----DDDDD------R-DDDDD-------",
//	"--------------R-DDDDDD--------",
//	"------------R-DDD-DDDD--------",
//	"----------R-DD-----DDD--------",
//	"--------R-D--------DDD--------",
//	"------R-DD---------DDD--------",
//	"----R-DDDD---------DDD--------",
//	"--R-DDDD-----------DDD--------",
//	"-SDDDDDD-----------DDD--------",
//	"-----DDD-----------DDD--------",
//	"-----DDD-----------DDD--------",
//	"-----DDD-----------DDD--------",
//	"-----DDD-----------DDD--------",
//	"-----DDD-----------DDD--------"
//};

std::string map[30] =
{
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"------------------------------",
	"---------------DD-------------",
	"----rl---------DD-------------",
	"---rDDl-------DDD-------------",
	"--rDDDDl------DDD-------------",
	"------------------------------",
	"-------rS-----SL--------------",
	"------rDD-----DDDL------------",
	"-----rDDD-----DDDDDL----------",
	"-SSSSDDDD------DDDDDDSSSSSSSS-",
	"-DDDDDDD-------DDDD-----DDDD--",
	"--D-DDDD--------DD------DDD---",
	"----DDDD--------DDD------DD---",
	"-----DDD--------DDD------DD---",
	"-----DD--------DDDDD----DDD---",
};

//std::string map[30] =
//{
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"-SSSSL------------------------",
//	"-DDDDDDL----------------------",
//	"-DDDDDDDDL----SSS-------------",
//	"--DDDDD--DDL------------------",
//	"--DDDD----DDDL----------------",
//	"--DDDD----DDDDDL--------------",
//	"--DDDD----DDDD--DL----rSSS----",
//	"--DDDD----DDDD----DL----------",
//	"-DDDDD----DDDD----DDDL--------",
//	"-DDDDD----DDDD------DDDL------",
//	"-DDDDD----DDDD------DDDDDSSSS-",
//	"-DDDD-----DDDD-------DDDDDDD--",
//	"-DDDD-----DDDD-------DDDDD----",
//	"-DDDD------DDD--------DDDD----",
//	"--DDD------DDD--------DDD-----",
//	"--DDD------DDD--------DDD-----",
//};

//std::string map[30] =
//{
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------------------------------",
//	"------rSl------------rSl------",
//	"-----rDDDS----------SDDDl-----",
//	"----rDDDDD----------DDDDDl----",
//	"---rDDDDD-----------DDDDDDl---",
//	"--rDDDDDD------------DDDDDDl--",
//	"-SDDDDDDD-------------DDDDDDS-",
//	"-DDDDDDD--------------DDDDDDD-",
//	"-DDDDDDD---------------DDDDD--",
//	"--DDDDD----------------DDDDD--",
//	"--DDDD-----------------DDDD---",
//	"--DDDD-----------------DDDD---",
//};

void level::CombatLevel::Init()
{
	// background
	InitBackground();

	Tile::ChangeTile(2);

	GameObject* go = nullptr;
	TransformComp* t = nullptr;
	ColliderComp* c = nullptr;

	Prefab s("Square");
	Prefab l("LeftTri");
	Prefab r("RightTri");
	Prefab p("Player");
	Prefab e("Enemy");
	Prefab d("DirectionArrow");

	for (int i = 0; i < 30; i++)
	{
		for (int j = 0; j < 30; j++)
		{
			if (map[i][j] == '-')
				continue;

			else if (map[i][j] == 'S')
			{
				go = s.NewGameObject();
			}

			else if (map[i][j] == 'D')
			{
				go = s.NewGameObject();
				go->GetComponent<SpriteComp>()->SetTexture("./Assets/Tile/FallGrassTileRect3.png");
			}

			else if (map[i][j] == 'r')
			{
				go = r.NewGameObject();
			}

			else if (map[i][j] == 'l')
			{
				go = l.NewGameObject();
			}

			else if (map[i][j] == 'R')
			{
				go = r.NewGameObject();

				t = go->GetComponent<TransformComp>();

				t->SetScale({ width * 2, height });

				float x = MapToPosX((float)j);
				float y = MapToPosY((float)i);
				t->SetPos({ x + width / 2, y });

				c = go->GetComponent<ColliderComp>();
				c->SetCollider();

				continue;
			}

			else if (map[i][j] == 'L')
			{
				go = l.NewGameObject();

				t = go->GetComponent<TransformComp>();

				t->SetScale({ width * 2, height });

				float x = MapToPosX((float)j);
				float y = MapToPosY((float)i);
				t->SetPos({ x + width / 2, y });

				c = go->GetComponent<ColliderComp>();
				c->SetCollider();

				continue;
			}

			t = go->GetComponent<TransformComp>();

			t->SetScale({ width, height }); 

			float x = MapToPosX((float)j);
			float y = MapToPosY((float)i);

			t->SetPos({ x, y });

			c = go->GetComponent<ColliderComp>();
			c->SetCollider();
		}
	}
	
	// player
	player = p.NewGameObject("player");
	player->GetComponent<TransformComp>()->SetPos({ 100, -1865 });

	// enemy
	enemy = e.NewGameObject("enemy");
	enemy->GetComponent<TransformComp>()->SetPos({ 2250, -1865 });

	// direction Arrow
	directionArrow = d.NewGameObject("directionArrow");

	int n = 1;

	//InitData
	//player->GetComponent<PlayerComp>()->playerData->InitData(100, 50, 50, 5, 1);
	//enemy->GetComponent<EnemyComp>()->enemyData->InitData(30 + n, 30 + n, 0 + n, 0, Data::EnemyData::GRADE::Normal);
	enemy->GetComponent<EnemyComp>()->enemyData->InitData(45.f + 15.f * n, 45.f + 15.f * n, 4.f + 3.f * n, 3.f, Data::EnemyData::GRADE::Elite);
	//enemy->GetComponent<EnemyComp>()->enemyData->InitData((float)60 + (float)60 * n, (float)60 + 60 * n, (float)9 + 6 * n, (float)5, Data::EnemyData::GRADE::Boss);

	Serializer::GetInstance().SaveLevel("./Assets/Level/test8.lvl", "./Assets/Background/BG1.png");

	//Init UI
	InitCombatUI();

}

void level::CombatLevel::Update()
{
	UpdateCombatUI();
	UpdateBackground();

#ifdef _DEBUG
	if (AEInputCheckTriggered(AEVK_1))
	{
		Data::PrintPlayerData(*player->GetComponent<PlayerComp>()->playerData);
	}
	if (AEInputCheckTriggered(AEVK_2))
	{
		Data::PrintEnemyData(*enemy->GetComponent<EnemyComp>()->enemyData);
	}
	if (AEInputCheckTriggered(AEVK_3))
	{
		Data::PrintCombatData(directionArrow->GetComponent<CombatComp>()->data);
	}
	if (AEInputCheckTriggered(AEVK_4))
	{
		SubtitleComp::IntersectDissolveText({ {{0,0}, 1, "Test", 1, 1, 1, 1}, 5, 2, 2 });
	}
#endif
}

void level::CombatLevel::Exit()
{
	ExitCombatUI();
}
